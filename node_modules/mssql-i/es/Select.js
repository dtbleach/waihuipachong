"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var SelectParamsModel_1 = require("./model/SelectParamsModel");
var SplitPageResultModel_1 = require("./model/SplitPageResultModel");
var readListFromResult = function (result) {
    return result.map(function (h) {
        var item = {};
        return Object.assign(item, h);
    });
};
var Select = (function () {
    function Select() {
    }
    Select.selectBase = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var sql, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sql = param.sql;
                        request = conn.request();
                        if (param.where) {
                            param.where.map(function (w, index) {
                                request.input("wpar" + index, w);
                                sql = sql.replace("?", "@wpar" + index);
                            });
                        }
                        return [4, request.query(sql)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Select.select = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Select.selectBase(conn, param)];
                    case 1:
                        result = _a.sent();
                        return [4, readListFromResult(result.recordset)];
                    case 2: return [2, _a.sent()];
                }
            });
        });
    };
    Select.selects = function (conn, params) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = new Array();
                        params.map(function (param) {
                            promises.push(Select.select(conn, param));
                        });
                        return [4, Promise.all(promises)];
                    case 1: return [2, _a.sent()];
                }
            });
        });
    };
    Select.selectTop1 = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Select.selectBase(conn, param)];
                    case 1:
                        result = _a.sent();
                        if (result.recordset.length > 0) {
                            return [2, readListFromResult([result.recordset[0]])[0]];
                        }
                        return [2, null];
                }
            });
        });
    };
    Select.selectCount = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var param2, restul, list, row;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        param2 = new SelectParamsModel_1.SelectParamsModel();
                        param2.sql = "select count(*) as value from (" + param.sql + ") tCount";
                        param2.where = param.where;
                        return [4, Select.selectBase(conn, param2)];
                    case 1:
                        restul = _a.sent();
                        list = readListFromResult(restul.recordset);
                        row = list[0];
                        return [2, Number(row.value)];
                }
            });
        });
    };
    Select.selectSplitPage = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var countPromise, index, startIndex, endIndex, sql, dataPromise, list, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Select.selectCount(conn, param)];
                    case 1:
                        countPromise = _a.sent();
                        if (param.index < 1) {
                            index = 1;
                        }
                        else {
                            index = param.index;
                        }
                        startIndex = param.pageSize * (index - 1);
                        endIndex = param.pageSize * index;
                        sql = "select * from\n      (" + param.sql + ") tsplit\n      where tsplit.row_number > " + startIndex + "\n        and tsplit.row_number <= " + endIndex + "\n    ";
                        return [4, Select.select(conn, {
                                sql: sql,
                                where: param.where
                            })];
                    case 2:
                        dataPromise = _a.sent();
                        return [4, Promise.all([countPromise, dataPromise])];
                    case 3:
                        list = _a.sent();
                        result = new SplitPageResultModel_1.SplitPageResultModel();
                        result.count = list[0];
                        result.list = list[1];
                        return [2, result];
                }
            });
        });
    };
    Select.selectOneValue = function (conn, param) {
        return __awaiter(this, void 0, void 0, function () {
            var result, v, keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Select.selectBase(conn, param)];
                    case 1:
                        result = _a.sent();
                        v = result.recordset[0];
                        if (v) {
                            keys = Reflect.ownKeys(v);
                            return [2, v[keys[0]]];
                        }
                        return [2, null];
                }
            });
        });
    };
    Select.selectGUID = function (conn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, Select.selectOneValue(conn, {
                            sql: "select upper(newid()) as GUID"
                        })];
                    case 1:
                        result = _a.sent();
                        return [2, result];
                }
            });
        });
    };
    return Select;
}());
exports.Select = Select;
