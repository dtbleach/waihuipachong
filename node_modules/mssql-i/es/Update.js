"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var mssql_1 = require("mssql");
var Schema_1 = require("./schema/Schema");
var Where_1 = require("./util/Where");
var Utils_1 = require("./util/Utils");
var Update = (function () {
    function Update() {
    }
    Update.update = function (conn, pars, tran) {
        return __awaiter(this, void 0, void 0, function () {
            var database, data, table, schemaModel, tableSchemaModel, request, fieldSQL, whereSQL, tableName, sql;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        database = pars.database || Utils_1.Utils.getDataBaseFromConnection(conn);
                        data = pars.data;
                        if (!data) {
                            return [2, Promise.reject(new Error("pars.data can not be null or empty!"))];
                        }
                        table = pars.table;
                        if (!table) {
                            return [2, Promise.reject(new Error("pars.table can not be null or empty!"))];
                        }
                        return [4, Schema_1.Schema.getSchema(conn, database)];
                    case 1:
                        schemaModel = _a.sent();
                        tableSchemaModel = schemaModel.getTableSchemaModel(table);
                        if (!tableSchemaModel) {
                            return [2, Promise.reject(new Error("Table '" + table + "' is not exists!"))];
                        }
                        if (tran) {
                            request = new mssql_1.Request(tran);
                        }
                        else {
                            request = conn.request();
                        }
                        fieldSQL = " ";
                        whereSQL = "";
                        Reflect.ownKeys(data).map(function (key, index) {
                            var column = tableSchemaModel.columns.filter(function (column) { return column.columnName === key.toString(); })[0];
                            if (column) {
                                var colName = column.columnName;
                                if (column.primaryKey) {
                                    whereSQL += " " + colName + " = @wpar" + colName + " and";
                                    request.input("wpar" + colName, Reflect.get(data, colName));
                                }
                                else {
                                    fieldSQL += " " + colName + " = @fpar" + colName + ",";
                                    request.input("fpar" + colName, Reflect.get(data, colName));
                                }
                            }
                        });
                        fieldSQL = fieldSQL.trim().replace(/\,$/, "");
                        if (whereSQL) {
                            whereSQL = " where " + whereSQL.replace(/and$/, "");
                        }
                        tableName = Utils_1.Utils.getDbObjectName(database, pars.chema, table);
                        sql = "update " + tableName + " set " + fieldSQL + " " + whereSQL;
                        return [4, request.query(sql)];
                    case 2:
                        _a.sent();
                        return [2, true];
                }
            });
        });
    };
    Update.updateByWhere = function (conn, pars, tran) {
        return __awaiter(this, void 0, void 0, function () {
            var database, data, where, table, schemaModel, tableSchemaModel, request, fieldSQL, _a, whereSQL, wherePars, tableName, sql;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        database = pars.database || Utils_1.Utils.getDataBaseFromConnection(conn);
                        data = pars.data;
                        if (!data) {
                            return [2, Promise.reject(new Error("pars.data can not be null or empty!"))];
                        }
                        where = pars.where;
                        table = pars.table;
                        if (!table) {
                            return [2, Promise.reject(new Error("pars.table can not be null or empty!"))];
                        }
                        return [4, Schema_1.Schema.getSchema(conn, database)];
                    case 1:
                        schemaModel = _b.sent();
                        tableSchemaModel = schemaModel.getTableSchemaModel(table);
                        if (!tableSchemaModel) {
                            return [2, Promise.reject(new Error("Table '" + table + "' is not exists!"))];
                        }
                        if (tran) {
                            request = new mssql_1.Request(tran);
                        }
                        else {
                            request = conn.request();
                        }
                        fieldSQL = " ";
                        Reflect.ownKeys(data).map(function (key, index) {
                            var column = tableSchemaModel.columns.filter(function (column) { return column.columnName === key.toString(); })[0];
                            if (column) {
                                var colName = column.columnName;
                                fieldSQL += " " + colName + " = @fpar" + colName + ",";
                                request.input("fpar" + colName, Reflect.get(data, colName));
                            }
                        });
                        fieldSQL = fieldSQL.trim().replace(/\,$/, "");
                        _a = Where_1.Where.getWhereSQL(where, tableSchemaModel), whereSQL = _a.whereSQL, wherePars = _a.wherePars;
                        Reflect.ownKeys(wherePars).map(function (m) {
                            request.input(m.toString(), Reflect.get(wherePars, m));
                        });
                        tableName = Utils_1.Utils.getDbObjectName(database, pars.chema, table);
                        sql = "update " + tableName + " set " + fieldSQL + " " + whereSQL;
                        return [4, request.query(sql)];
                    case 2:
                        _b.sent();
                        return [2, true];
                }
            });
        });
    };
    return Update;
}());
exports.Update = Update;
