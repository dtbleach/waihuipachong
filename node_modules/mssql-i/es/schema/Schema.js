"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Select_1 = require("../Select");
var SchemaModel_1 = require("../model/SchemaModel");
var GlobalCache_1 = require("../global/GlobalCache");
var SchemaCache = (function () {
    function SchemaCache() {
    }
    SchemaCache.getHash = function () {
        var hash = GlobalCache_1.GlobalCache.get(SchemaCache.globalKey);
        if (!hash) {
            hash = {};
            GlobalCache_1.GlobalCache.set(SchemaCache.globalKey, hash);
        }
        return hash;
    };
    SchemaCache.get = function (database) {
        return Reflect.get(SchemaCache.getHash(), database);
    };
    SchemaCache.set = function (database, value) {
        return Reflect.set(SchemaCache.getHash(), database, value);
    };
    SchemaCache.globalKey = "SchemaModel";
    return SchemaCache;
}());
exports.SchemaCache = SchemaCache;
var Schema = (function () {
    function Schema() {
    }
    Schema.clear = function (database) {
        SchemaCache.set(database, null);
    };
    Schema.getSchema = function (conn, database) {
        return __awaiter(this, void 0, void 0, function () {
            var schemaModel, sqlTables, sqlColumns, sqlProcedures, sqlProcedurePars, lists, tableList, columnList_1, procedureList, procedureParsList_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schemaModel = SchemaCache.get(database);
                        if (!!schemaModel) return [3, 2];
                        schemaModel = new SchemaModel_1.SchemaModel();
                        sqlTables = "\n        select\n          obj.schema_id as schemaId,\n          schms.name as schemaName,\n          obj.object_id as objId,\n          obj.name as tableName,\n          dis.value as description\n        from\n        sys.objects as obj\n        join sys.schemas as schms on obj.schema_id = schms.schema_id\n        left join sys.extended_properties dis on dis.major_id = obj.object_id and dis.minor_id = 0 and LOWER(dis.name) = 'ms_description'\n        where obj.type in('U')\n      ";
                        sqlColumns = "\n        select\n          sches.schema_id as schemaId,\n          sches.name as schemaName,\n          tbs.object_id as tableId,\n          tbs.name as tableName,\n          sysCols.colid as position,\n          sysCols.name as columnName,\n          columnProperty(sysCols.id, sysCols.name, 'IsIdentity') as isIdentity ,\n          case when pk.object_id is not null then 1 else 0 end as primaryKey,\n          sysType.name as dbType,\n          sysCols.length AS size,\n          sysCols.prec,\n          sysCols.scale,\n          sysCols.isnullable as canNull,\n          isnull(e.text, '')  as defaultValue,\n          isNull(dis1.value, '') as description\n        from\n          sys.syscolumns as sysCols\n          join sys.tables as tbs on sysCols.id = tbs.object_id\n          join sys.schemas as sches on tbs.schema_id = sches.schema_id\n          left join sys.systypes as sysType on sysCols.xusertype = sysType.xusertype\n          left join sys.syscomments as e on sysCols.cdefault = e.id\n          left join sys.extended_properties as dis1 on sysCols.id = dis1.major_id and sysCols.colid = dis1.minor_id\n          left join (\n\n            select\n              indexs.object_id,\n              indexs.index_id as indexId,\n              indCols.column_id as columnId\n            from\n              sys.indexes as indexs\n              join sys.index_columns as indCols on indexs.object_id = indCols.object_id and indexs.index_id = indCols.index_id\n            where indexs.type <> 0 and indexs.is_primary_key = 1\n\n          ) pk on sysCols.id = pk.object_id and pk.columnId = sysCols.colid\n        order by tableName asc, sysCols.colid asc\n      ";
                        sqlProcedures = "\n        select\n          obj.schema_id as schemaId,\n          schms.name as schemaName,\n          sysMod.object_id as objId,\n          obj.name as procedureName,\n          dis.value as description\n        from\n          sys.sql_modules as sysMod\n          join sys.objects as obj on sysMod.object_id = obj.object_id\n          join sys.schemas as schms on obj.schema_id = schms.schema_id\n          left join sys.extended_properties dis on dis.major_id = sysMod.object_id and dis.minor_id = 0 and LOWER(dis.name) = 'ms_description'\n        where obj.type = 'P'\n        order by schemaName asc, procedureName asc\n      ";
                        sqlProcedurePars = "\n        select\n          pars.object_id as objId,\n          REPLACE(pars.name, '@', '') as parameterName,\n          pars.parameter_id as parameterId,\n          case pars.is_output when 0 then 'in' else 'out' end as parameterMode,\n          typ.name as dbType,\n          pars.max_length as size,\n          pars.precision as prec,\n          pars.scale,\n          pars.has_default_value as hasDefaultValue,\n          pars.default_value as defaultValue,\n          dis.value as description\n        from\n          sys.parameters as pars\n          join sys.types typ on pars.system_type_id = typ.system_type_id and pars.user_type_id = typ.user_type_id\n          left join sys.extended_properties dis on pars.object_id = dis.major_id and dis.minor_id = pars.parameter_id\n        order by objId\n      ";
                        return [4, Select_1.Select.selects(conn, [
                                { sql: sqlTables, where: [] },
                                { sql: sqlColumns, where: [] },
                                { sql: sqlProcedures, where: [] },
                                { sql: sqlProcedurePars, where: [] }
                            ])];
                    case 1:
                        lists = _a.sent();
                        tableList = lists[0];
                        columnList_1 = lists[1];
                        schemaModel.tables = new Array();
                        tableList.map(function (table) {
                            var tableModel = new SchemaModel_1.TableSchemaModel();
                            tableModel.name = Reflect.get(table, "tableName");
                            tableModel.columns = [];
                            schemaModel.tables.push(tableModel);
                            columnList_1
                                .filter(function (column) { return Reflect.get(column, "tableName") === Reflect.get(table, "tableName"); })
                                .map(function (column) {
                                var columnModel = new SchemaModel_1.ColumnSchemaModel();
                                columnModel.columnName = Reflect.get(column, "columnName");
                                columnModel.primaryKey = Reflect.get(column, "primaryKey") === 1;
                                columnModel.autoIncrement = Reflect.get(column, "isIdentity") === 1;
                                tableModel.columns.push(columnModel);
                            });
                        });
                        procedureList = lists[2];
                        procedureParsList_1 = lists[3];
                        schemaModel.procedures = new Array();
                        procedureList.map(function (procedure) {
                            var procedureModel = new SchemaModel_1.ProcedureSchemaModel();
                            procedureModel.name = Reflect.get(procedure, "procedureName");
                            procedureModel.pars = [];
                            schemaModel.procedures.push(procedureModel);
                            procedureParsList_1
                                .filter(function (par) { return Reflect.get(par, "objId") === Reflect.get(procedure, "objId"); })
                                .map(function (par) {
                                var parModel = new SchemaModel_1.ProcedureParSchemaModel();
                                parModel.name = Reflect.get(par, "parameterName");
                                parModel.parameterMode = Reflect.get(par, "parameterMode");
                                procedureModel.pars.push(parModel);
                            });
                        });
                        SchemaCache.set(database, schemaModel);
                        return [2, schemaModel];
                    case 2: return [2, schemaModel];
                }
            });
        });
    };
    return Schema;
}());
exports.Schema = Schema;
